def build(ctx):
  def injectpath(task):
    import re
    src = task.inputs[0].abspath()
    tgt = task.outputs[0].abspath() 
    f=open(src)
    txt = f.read()
    txt = re.sub("\$REPLACEPATH",ctx.env.PYTHONDIR,txt)
    txt = re.sub("\$PYTHONEXE",ctx.env.PYTHON[0],txt)
    f=open(tgt,"w")
    print >>f,txt,
    f.close()
    
  ctx.load("execconfig","waf_tools")
  if ctx.env.CYTHON:
    ctx(
      features = "c cshlib pyext",
      source = "clik/lkl.pyx",
      target  = "lkl",
      includes = "../"+" ../minipmc/"*(not ctx.env.has_pmc),
      use = "clik",
      cflags = "-fopenmp",
      install_path = "${PYTHONDIR}/clik"
    )
    if (ctx.env.has_f90 and ctx.env.has_egfs):
      ctx(
        features = "c cshlib pyext",
        source = "clik/egfs.pyx",
        target  = "egfs",
        includes = "../"+" ../minipmc/"*(not ctx.env.has_pmc),
        use = "clik",
        cflags = "-fopenmp",
        install_path = "${PYTHONDIR}/clik"
      )
  
  ctx(
    source = "clik/parobject.py clik/__init__.py clik/miniparse.py",
    install_path = "${PYTHONDIR}/clik"
  )
  
  # python execs
  
  for cde in ["synthetic_smica","clik_example_py","clik_join","clik_disjoin","clik_print","create_lowl_problem",
              "prepare_lowl","prepare_wmap","prepare_bopix","clik_include_external","clik_extract_external","clik_add_egfs","prepare_CAMspec"]:  
    ctx(
      execrule = injectpath,
      source = cde+".py",
      target = cde,
      install_path = ctx.env.BINDIR
      )    
